Transform: AWS::Serverless-2016-10-31
Resources:
  SharingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudWatch-CrossAccountSharingRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              AWS: !ImportValue cfn-utilities:MasterAccountId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchAutomaticDashboardsAccess
        - arn:aws:iam::aws:policy/job-function/ViewOnlyAccess
        - arn:aws:iam::aws:policy/AWSXrayReadOnlyAccess

  EventsPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      Principal: !ImportValue cfn-utilities:MasterAccountId
      Action: events:PutEvents
      StatementId: MasterAccountEvents

  ClustersWithStoppableServices:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: ClustersWithStoppableServices
      Description: Clusters who have automatic service stopping enabled
      ResourceQuery:
        Type: TAG_FILTERS_1_0
        Query:
          ResourceTypeFilters: [AWS::ECS::Cluster]
          TagFilters:
            - Key: ENABLE_SERVICE_STOPPING
              Values: ["true"]

  ServiceStopperPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - resource-groups:ListGroupResources
              - tag:GetResources
              - ecs:ListServices
              - ecs:DescribeServices
              - ecs:UpdateService
            Resource: "*"

  ServiceStopper:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnetcore3.1
      Handler: ServiceStopper::Cythral.CloudFormation.Monitoring.ServiceStopper.Handler::Handle
      CodeUri: ../bin/ServiceStopper/Release/netcoreapp3.1/publish/
      Timeout: 300
      Policies:
        - !Ref ServiceStopperPolicy
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Input: !Sub |
              {
                "MonitoredClustersGroupName": "${ClustersWithStoppableServices}"
              }

  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 30

  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${CloudTrailBucket}
              - !Sub arn:aws:s3:::${CloudTrailBucket}/*
            Principal:
              Service: cloudtrail.amazonaws.com

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - CloudTrailBucketPolicy
    Properties:
      S3BucketName: !Ref CloudTrailBucket
      IsLogging: true
