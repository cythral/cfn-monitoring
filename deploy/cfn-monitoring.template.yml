Description: Resources for monitoring applications and keeping costs low.
Transform: AWS::Serverless-2016-10-31
Parameters:
  CreateCrossAccountServiceRole:
    Type: String
    Description: Whether or not to create the cross account CloudWatch service role.
    AllowedValues:
      - "true"
      - "false"

  EnableServiceStopper:
    Type: String
    Description: Whether or not to create and enable the service stopper.
    AllowedValues:
      - "true"
      - "false"

  EnableDatabaseStopper:
    Type: String
    Description: Whether or not to create and enable the database stopper.
    AllowedValues:
      - "true"
      - "false"

  EnableCrossAccountEvents:
    Type: String
    Description: Whether or not to allow events published from the main account.
    AllowedValues:
      - "true"
      - "false"

  EnableCloudTrail:
    Type: String
    Description: Whether or not to enable CloudTrail logging.
    AllowedValues:
      - "true"
      - "false"

  LogGroupRetentionInDays:
    Type: Number
    Description: Minimum number of days to retain logs for.

Conditions:
  CreateCrossAccountServiceRole: !Equals
    - !Ref CreateCrossAccountServiceRole
    - "true"

  EnableServiceStopper: !Equals
    - !Ref EnableServiceStopper
    - "true"

  EnableDatabaseStopper: !Equals
    - !Ref EnableDatabaseStopper
    - "true"

  EnableCrossAccountEvents: !Equals
    - !Ref EnableCrossAccountEvents
    - "true"

  EnableCloudTrail: !Equals
    - !Ref EnableCloudTrail
    - "true"

Resources:
  ServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Condition: CreateCrossAccountServiceRole
    Properties:
      AWSServiceName: cloudwatch-crossaccount.amazonaws.com
      Description: Allows CloudWatch to assume CloudWatch-CrossAccountSharing roles in remote accounts on behalf of the current account in order to display data cross-account, cross region

  SharingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudWatch-CrossAccountSharingRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              AWS: "*"
            Condition:
              StringEquals:
                aws:PrincipalOrgId: !ImportValue cfn-metadata:OrganizationId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchAutomaticDashboardsAccess
        - arn:aws:iam::aws:policy/job-function/ViewOnlyAccess
        - arn:aws:iam::aws:policy/AWSXrayReadOnlyAccess
        - !Ref ListAccountsPolicy

  ListAccountsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - organizations:ListAccounts
              - organizations:ListAccountsForParent
            Resource: "*"

  EventsPolicy:
    Type: AWS::Events::EventBusPolicy
    Condition: EnableCrossAccountEvents
    Properties:
      Principal: !ImportValue cfn-utilities:MasterAccountId
      Action: events:PutEvents
      StatementId: MasterAccountEvents

  ClustersWithStoppableServices:
    Type: AWS::ResourceGroups::Group
    Condition: EnableServiceStopper
    Properties:
      Name: ClustersWithStoppableServices
      Description: Clusters who have automatic service stopping enabled
      ResourceQuery:
        Type: TAG_FILTERS_1_0
        Query:
          ResourceTypeFilters: [AWS::ECS::Cluster]
          TagFilters:
            - Key: ENABLE_SERVICE_STOPPING
              Values: ["true"]

  ServiceStopperPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: EnableServiceStopper
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - resource-groups:ListGroupResources
              - tag:GetResources
              - ecs:ListServices
              - ecs:DescribeServices
              - ecs:UpdateService
            Resource: "*"

  ServiceStopper:
    Type: AWS::Serverless::Function
    Condition: EnableServiceStopper
    Properties:
      Runtime: dotnetcore3.1
      Handler: ServiceStopper::Cythral.CloudFormation.Monitoring.ServiceStopper.Handler::Handle
      CodeUri: ../bin/ServiceStopper/Release/netcoreapp3.1/publish/
      Timeout: 300
      Policies:
        - !Ref ServiceStopperPolicy
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Input: !Sub |
              {
                "MonitoredClustersGroupName": "${ClustersWithStoppableServices}"
              }

  StoppableDatabases:
    Type: AWS::ResourceGroups::Group
    Condition: EnableDatabaseStopper
    Properties:
      Name: StoppableDatabases
      Description: Databases that can be stopped
      ResourceQuery:
        Type: TAG_FILTERS_1_0
        Query:
          ResourceTypeFilters:
            - AWS::RDS::DBCluster
            - AWS::RDS::DBInstance
          TagFilters:
            - Key: ENABLE_DATABASE_STOPPING
              Values: ["true"]

  DatabaseStopperPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: EnableDatabaseStopper
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - resource-groups:ListGroupResources
              - tag:GetResources
              - rds:DescribeDBClusters
              - rds:DescribeDBInstances
              - rds:StopDBCluster
              - rds:StopDBInstance
              - cloudwatch:GetMetricStatistics
            Resource: "*"

  DatabaseStopper:
    Type: AWS::Serverless::Function
    Condition: EnableDatabaseStopper
    Properties:
      Runtime: dotnetcore3.1
      Handler: DatabaseStopper::Cythral.CloudFormation.Monitoring.DatabaseStopper.Handler::Handle
      CodeUri: ../bin/DatabaseStopper/Release/netcoreapp3.1/publish/
      Timeout: 300
      Policies:
        - !Ref DatabaseStopperPolicy
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Input: !Sub |
              {
                "MonitoredDatabasesGroupName": "${StoppableDatabases}"
              }

  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Condition: EnableCloudTrail
    Properties:
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: !Ref LogGroupRetentionInDays

  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: EnableCloudTrail
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${CloudTrailBucket}
              - !Sub arn:aws:s3:::${CloudTrailBucket}/*
            Principal:
              Service: cloudtrail.amazonaws.com

  CloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableCloudTrail
    Properties:
      RetentionInDays: !Ref LogGroupRetentionInDays

  CloudTrailRole:
    Type: AWS::IAM::Role
    Condition: EnableCloudTrail
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: cloudtrail.amazonaws.com
      ManagedPolicyArns:
        - !Ref CloudTrailPolicy

  CloudTrailPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: EnableCloudTrail
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: logs:*
            Resource: !GetAtt CloudTrailLogGroup.Arn

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Condition: EnableCloudTrail
    DependsOn:
      - CloudTrailBucketPolicy
    Properties:
      CloudWatchLogsLogGroupArn: !GetAtt CloudTrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudTrailRole.Arn
      S3BucketName: !Ref CloudTrailBucket
      IsLogging: true
      IncludeGlobalServiceEvents: true
      EventSelectors:
        - DataResources:
            - Type: AWS::Lambda::Function
              Values: [arn:aws:lambda]
